Sales table ====
id (pk)
product_id (fk)
quantity_before (stock_before - stock_after for the first insert
			else:
			current_quantity_before = 	previous_quantity_before - previous_quantity_sold)
quantity_sold
amount
sold_date
sold_by
is_cancelled (boolean default: false)
remarks
updated_reason
updated_by (null as default)
updated_at
sold_at (time)


============Product, Audit, Warehouse, Users,
lst_product

Products ====
id (pk)
name
description
price_per_item
quantity_per_crate
price_per_crate
total_items
stock_threshold (where it gets to know we are running out of stock)
remarks
created_by
created_at
updated_by
updated_at


Warehouse ====
id (pk)
product_id (fk)
quantity_per_crate
no_of_crates
no_of_pieces
price_per_crate
price_per_piece (decimal 10,2)
total_items (items) total items is generated
stock_date (day of the main stock)
description / comments
created_by
created_at
updated_reason
updated_by
updated_at

Retail (Warehouse Logs) ====
id (pk)
product_id (fk)
original_stock
stock_before (per item)
stock_after (per item)
expected_price
collected_by
collected_at
remarks
created_by
created_at
updated_by
updated_at


Audit======
Any/All activities that would happen on the platform / portal
id (pk)
user
action (SALES / LOGIN / LOGOUT / RETAILING / WAREHOUSING / ADD_USER / 			CHANGE_USER_ROLE)
remarks
created_by
created_at
updated_by
updated_at


Retail 1:
original stock: 100
Stock before: 100
Stock after: 60

Retail 2:
original stock: 100
Stock before: 60
Stock after: 40

Retail 3: *** 80 added
original stock: 120
Stock before: 120
Stock after: 90

Retail 4:
original stock: 120
Stock before: 90
Stock after: 0



Note =======================================
A scheduler checks stock_after in warehouse_logs against stock_threshold in products.
If the stock after is <= the stock_threshold then send a notification/sms alert.

--Expected price = difference in stock_before and stock_after * price_per_piece in warehose table


---On new stock when there is existing stock, get the remaining items and add it to the new items, this gives us the new total_stock in warehouse table.
The total_stock in warehouse table is always the original stock

////During retail
---If current_original_stock - previous_original_stock == 0:
		then original_stock = previous_stock_after
		then stock_before = original_stock or previous_stock_after
	elseif current_original_stock - previous_original_stock > 0:
		then original_stock = current_total_stock
		then stock_before = original_stock or current_total_stock
	else:
		echo invalid situation since the difference between the current_original_stock - previous_original_stock is negative(-).
		Please discuss with Admin.




CREATE TABLE tbl_products (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    name varchar(255),
    description longtext,
    price_per_item varchar(255),
    quantity_per_crate varchar(100),
    price_per_crate varchar(255),
    total_items varchar(255),
    stock_threshold varchar(255),
    remarks varchar(255),
    created_by varchar(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE tbl_sales (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    quantity_before varchar(255),
    quantity_sold varchar(255),
    amount varchar(255),
    sold_date varchar(255),
    sold_by varchar(255),
    is_cancelled tinyint(0),
    remarks varchar(255),
    updated_reason varchar(255),
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    sold_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ProductSold FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE

);



CREATE TABLE tbl_warehouse (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    quantity_per_crate varchar(50),
    no_of_crates varchar(50),
    no_of_pieces varchar(50),
    price_per_crate varchar(50),
    price_per_piece varchar(50),
    total_items varchar(50),
    stock_date date,
    description longtext,
    created_by varchar(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_reason longtext,
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ProductWarehouse FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE tbl_warehouse_logs (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    original_stock varchar(255),
    stock_before varchar(255),
    stock_after varchar(255),
    expected_price varchar(255),
    collected_by varchar(255),
    collected_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    remarks longtext,
    created_by varchar(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ProductWarehouseLog FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE tbl_files (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    title varchar(255),
    description varchar(255),
    filename varchar(255),
    file_id varchar(255),
    file_url varchar(255),
    folder_id int(11),
    date_created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    date_updated TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (folder_id) REFERENCES tbl_folders(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
   );


   CREATE TABLE tbl_warehouse_logs (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    number_of_pieces_transfered varchar(20),
    original_stock varchar(20),
    stock_before varchar(20),
    stock_after varchar(20),
    expected_price varchar(20),
    collected_by varchar(100),
    collected_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    remarks longtext,
    created_by varchar(100),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_ProductWarehouseLog FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE tbl_sales_audit (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    user_id int,
    product_id int,
    starting_stock varchar(20),
    starting_stock_price varchar(20),
    ending_stock varchar(20),
    ending_stock_price varchar(20),
    expected_price varchar(20),
    sales_date varchar(20),
    created_by varchar(100),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_by varchar(255),
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT FK_product_audit FOREIGN KEY (product_id)
    REFERENCES tbl_products(id),
    CONSTRAINT FK_user_audit FOREIGN KEY (user_id)
    REFERENCES tbl_users(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);



CREATE TABLE tbl_retail (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    stock_before varchar(255),
    stock_after varchar(255),
    quantity_in_crate varchar(255),
    quantity_in_pieces varchar(255),
    total_quantity varchar(255),
    expected_price varchar(255),
    first_transfer_date TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    first_transfer_by varchar(255),
    last_transfer_date varchar(255),
    last_transfer_by varchar(255),
    CONSTRAINT FK_retal_product FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


CREATE TABLE tbl_retail (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    product_id int,
    stock_before varchar(255),
    stock_after varchar(255),
    quantity_in_crate varchar(255),
    quantity_in_pieces varchar(255),
    total_quantity varchar(255),
    expected_price varchar(255),
    CONSTRAINT FK_retail_product FOREIGN KEY (product_id)
    REFERENCES tbl_products(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);



=============tbl_bar_table
purchased_items (text)
[
    {
        'product_id':1,
        "quantity": 5,
        "total_price": 50,
        "last_added_time": "the last time you topped up"
    },
    {
        'product_id':2,
        "quantity": 5,
        "total_price": 50,
        "last_added_time": "the last time you topped up"
    },
    {
        'product_id':1,
        "quantity": 5,
        "total_price": 50,
        "last_added_time": "the last time you topped up"
    }
]





=================   CAR WASH
tbl_car_washers
id
firstname
lastname
nickname
bio
phone_number
created_at
created_by
updated_at
updated_by

CREATE TABLE tbl_car_washers (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    firstname varchar(100),
    lastname varchar(100),
    nickname varchar(100),
    phone_number varchar(100),
    bio mediumtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100)
);

tbl_vehicles
id
name
type
description
created_at
created_by
updated_at
updated_by

CREATE TABLE tbl_vehicle_type(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    name varchar(100),
    description mediumtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100)
);

-- =====Correct
CREATE TABLE tbl_vehicles (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    name varchar(100),
    vehicle_type int,
    description mediumtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_vehicle_vehicle_type FOREIGN KEY (vehicle_type)
    REFERENCES tbl_vehicle_type(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE tbl_vehicles (
    id int not null PRIMARY KEY AUTO_INCREMENT,
    name varchar(100),
    type varchar(100),
    description mediumtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100)
);



tbl_services
id
vehicle_id
name
price
washer_percentage_shares
description
created_at
created_by
updated_at
updated_by

CREATE TABLE tbl_services(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    name varchar(100),
    washer_percentage varchar(100),
    description longtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100)
);

later deleted
CREATE TABLE tbl_services(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    vehicle_id int,
    name varchar(100),
    price varchar(100),
    washer_percentage varchar(100),
    description longtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_service_vehicle FOREIGN KEY (vehicle_id)
    REFERENCES tbl_vehicles(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


tbl_pricing
CREATE TABLE tbl_pricing(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    service_id int,
    vehicle_id int,
    price varchar(100),
    description longtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_pricing_service FOREIGN KEY (service_id)
    REFERENCES tbl_services(id),
    CONSTRAINT FK_pricing_vehicle FOREIGN KEY (vehicle_id)
    REFERENCES tbl_vehicles(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);


tbl_transactions
id
washers_id
service_ids (an array of services)
amount (sum of the prices of all the services )
description
washer_commision (the sum of percentage shares on each of the services)
supervisor
created_at
created_by
updated_at
updated_by

CREATE TABLE tbl_washing_transactions(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    vehicle_id int,
    service_ids varchar(200),
    washer_id int,
    amount varchar(100),
    washer_commission varchar(100),
    supervisor varchar(100),
    description longtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_washer_transaction FOREIGN KEY (washers_id)
    REFERENCES tbl_car_washers(id),
    CONSTRAINT FK_vehicle_transaction FOREIGN KEY (vehicle_id)
    REFERENCES tbl_vehicles(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

-- =============New
CREATE TABLE tbl_washing_transactions(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    vehicle_id int,
    service_ids varchar(200),
    washer_id int,
    amount varchar(100),
    washer_commission varchar(100),
    supervisor varchar(100),
    description longtext,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_washer_transaction FOREIGN KEY (washers_id)
    REFERENCES tbl_car_washers(id),
    CONSTRAINT FK_vehicle_transaction FOREIGN KEY (vehicle_id)
    REFERENCES tbl_vehicles(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

tbl_washer_debts
id
washers_id
debt_amount
amount_paid
amount_left
payment_status (paid, runaway, not paid)
paid_to
paid_on (date)
created_at
created_by
updated_at
updated_by

CREATE TABLE tbl_washer_debts(
    id int not null PRIMARY KEY AUTO_INCREMENT,
    washer_id int,
    debt_amount varchar(200),
    amount_paid int,
    amount_left varchar(100),
    payment_status varchar(100),
    paid_to varchar(100),
    paid_on varchar(100),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_by varchar(100),
    updated_by varchar(100),
    updated_at varchar(100),
    CONSTRAINT FK_washer_debt FOREIGN KEY (washers_id)
    REFERENCES tbl_car_washers(id)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

















